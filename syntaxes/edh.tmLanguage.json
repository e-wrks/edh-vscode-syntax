{
	"name": "Edh",
	"scopeName": "source.edh",
	"fileTypes": [
		".edh"
	],
	"patterns": [
		{
			"include": "#statements"
		},
		{
			"include": "#batteries"
		},
		{
			"include": "#comment"
		},
		{
			"include": "#literal"
		},
		{
			"include": "#expressions"
		},
		{
			"include": "#identifiers"
		},
		{
			"include": "#punctuations"
		},
		{
			"include": "#qstring-tripple-double"
		},
		{
			"include": "#qstring-tripple-single"
		},
		{
			"include": "#qstring-tripple-backtick"
		},
		{
			"include": "#qstring-double"
		},
		{
			"include": "#qstring-single"
		},
		{
			"include": "#qstring-backtick"
		}
	],
	"repository": {
		"statements": {
			"patterns": [
				{
					"name": "keyword.concur.control.edh",
					"match": "(?<![_'[:alnum:]])(ai|go|defer|perceive)(?![_'[:alnum:]])"
				},
				{
					"name": "keyword.control.edh",
					"match": "(?<![_'[:alnum:]])(while|break|continue|fallthrough|return|throw|rethrow|pass)(?![_'[:alnum:]])"
				},
				{
					"name": "storage.type.edh",
					"match": "(?<![_'[:alnum:]])(extends|namespace|module|class|data|method|generator|interpreter|producer|operator|symbol|infix|infixl|infixr)(?![_'[:alnum:]])"
				},
				{
					"name": "storage.modifier.edh",
					"match": "(?<![_'[:alnum:]])(import|into|export|effect|let|const)(?![_'[:alnum:]])"
				},
				{
					"name": "keyword.compat.edh",
					"match": "(?<![_'[:alnum:]])(new|try|catch|finally)(?![_'[:alnum:]])"
				}
			]
		},
		"batteries": {
			"patterns": [
				{
					"name": "support.module.edh",
					"match": "(?<![_'[:alnum:]])(console|batteries|debug)(?![_'[:alnum:]])"
				},
				{
					"name": "support.function.edh",
					"match": "(?<![_'[:alnum:]])(null|compare|type|constructor|supers|property|setter|dict|error|assert|print|abs|max|min|id|blob|str|json|repr|show|desc|cap|grow|len|mark|zip|unzip|scope|sandbox|parseEdh|makeOp|makeExpr|partial)(?![_'[:alnum:]])"
				}
			]
		},
		"qstring-tripple-double": {
			"name": "string.edh",
			"begin": "\"\"\"",
			"end": "\"\"\"",
			"patterns": [
				{
					"name": "constant.character.escape.edh",
					"match": "\\\\."
				}
			]
		},
		"qstring-tripple-single": {
			"name": "string.edh",
			"begin": "'''",
			"end": "'''",
			"patterns": [
				{
					"name": "constant.character.escape.edh",
					"match": "\\\\."
				}
			]
		},
		"qstring-tripple-backtick": {
			"name": "string.edh",
			"begin": "```",
			"end": "```",
			"patterns": [
				{
					"name": "constant.character.escape.edh",
					"match": "\\\\."
				}
			]
		},
		"qstring-double": {
			"name": "string.edh",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.edh",
					"match": "\\\\."
				}
			]
		},
		"qstring-single": {
			"name": "string.edh",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.edh",
					"match": "\\\\."
				}
			]
		},
		"qstring-backtick": {
			"name": "string.edh",
			"begin": "`",
			"end": "`",
			"patterns": [
				{
					"name": "constant.character.escape.edh",
					"match": "\\\\."
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.block.edh",
					"begin": "{#",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.edh"
						}
					},
					"end": "#}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.edh"
						}
					}
				},
				{
					"begin": "(^[ \\t]+)?(?=#)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.edh"
						}
					},
					"end": "(?=$)",
					"patterns": [
						{
							"name": "comment.line.edh",
							"begin": "#",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.edh"
								}
							},
							"end": "(?=$)"
						}
					]
				}
			]
		},
		"literal": {
			"name": "literal.edh",
			"patterns": [
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#boolean-literal"
				},
				{
					"include": "#nil-literal"
				},
				{
					"include": "#not-applicable-literal"
				},
				{
					"include": "#none-literal"
				},
				{
					"include": "#nothing-literal"
				},
				{
					"include": "#all-literal"
				},
				{
					"include": "#any-literal"
				},
				{
					"include": "#equal-literal"
				},
				{
					"include": "#less-than-literal"
				},
				{
					"include": "#greater-than-literal"
				},
				{
					"include": "#numericConstant-literal"
				},
				{
					"include": "#this-literal"
				},
				{
					"include": "#that-literal"
				},
				{
					"include": "#super-literal"
				}
			]
		},
		"numeric-literal": {
			"patterns": [
				{
					"name": "constant.numeric.decimal.edh",
					"match": "\\b[0-9]+(\\.[0-9]+)?([eE][\\+\\-]?[0-9]+)?"
				}
			]
		},
		"boolean-literal": {
			"patterns": [
				{
					"name": "constant.language.edh",
					"match": "(?<![_'[:alnum:]])true(?![_'[:alnum:]])"
				},
				{
					"name": "constant.language.edh",
					"match": "(?<![_'[:alnum:]])false(?![_'[:alnum:]])"
				}
			]
		},
		"nil-literal": {
			"name": "constant.language.edh",
			"match": "(?<![_'[:alnum:]])nil(?![_'[:alnum:]])"
		},
		"not-applicable-literal": {
			"name": "constant.language.edh",
			"match": "(?<![_'[:alnum:]])NA(?![_'[:alnum:]])"
		},
		"none-literal": {
			"name": "constant.language.edh",
			"match": "(?<![_'[:alnum:]])None(?![_'[:alnum:]])"
		},
		"nothing-literal": {
			"name": "constant.language.edh",
			"match": "(?<![_'[:alnum:]])Nothing(?![_'[:alnum:]])"
		},
		"all-literal": {
			"name": "constant.language.edh",
			"match": "(?<![_'[:alnum:]])All(?![_'[:alnum:]])"
		},
		"any-literal": {
			"name": "constant.language.edh",
			"match": "(?<![_'[:alnum:]])Any(?![_'[:alnum:]])"
		},
		"equal-literal": {
			"name": "constant.language.edh",
			"match": "(?<![_'[:alnum:]])EQ(?![_'[:alnum:]])"
		},
		"less-than-literal": {
			"name": "constant.language.edh",
			"match": "(?<![_'[:alnum:]])LT(?![_'[:alnum:]])"
		},
		"greater-than-literal": {
			"name": "constant.language.edh",
			"match": "(?<![_'[:alnum:]])GT(?![_'[:alnum:]])"
		},
		"this-literal": {
			"name": "variable.language.edh",
			"match": "(?<![_'[:alnum:]])this(?![_'[:alnum:]])"
		},
		"that-literal": {
			"name": "variable.language.edh",
			"match": "(?<![_'[:alnum:]])that(?![_'[:alnum:]])"
		},
		"super-literal": {
			"name": "variable.language.edh",
			"match": "(?<![_'[:alnum:]])super(?![_'[:alnum:]])"
		},
		"numericConstant-literal": {
			"patterns": [
				{
					"name": "constant.language.edh",
					"match": "(?<![_'[:alnum:]])nan(?![_'[:alnum:]])"
				},
				{
					"name": "constant.language.edh",
					"match": "(?<![_'[:alnum:]])inf(?![_'[:alnum:]])"
				}
			]
		},
		"expressions": {
			"patterns": [
				{
					"name": "keyword.other.expr.edh",
					"match": "(?<![_'[:alnum:]])expr(?![_'[:alnum:]])"
				},
				{
					"name": "keyword.other.sink.edh",
					"match": "(?<![_'[:alnum:]])sink(?![_'[:alnum:]])"
				},
				{
					"name": "expr.keyword.operator.edh",
					"match": "(?<![_'[:alnum:]])void(?![_'[:alnum:]])"
				},
				{
					"name": "expr.keyword.operator.edh",
					"match": "(?<![_'[:alnum:]])in(?![_'[:alnum:]])"
				},
				{
					"name": "expr.keyword.operator.edh",
					"match": "(?<![_'[:alnum:]])not(?![_'[:alnum:]])"
				},
				{
					"name": "expr.keyword.operator.edh",
					"match": "(?<![_'[:alnum:]])is(?![_'[:alnum:]])"
				},
				{
					"name": "expr.keyword.operator.edh",
					"match": "(?<![_'[:alnum:]])and(?![_'[:alnum:]])"
				},
				{
					"name": "expr.keyword.operator.edh",
					"match": "(?<![_'[:alnum:]])or(?![_'[:alnum:]])"
				},
				{
					"name": "expr.keyword.control.edh",
					"match": "(?<![_'[:alnum:]])(if|then|else)(?![_'[:alnum:]])"
				},
				{
					"name": "expr.keyword.control.edh",
					"match": "(?<![_'[:alnum:]])(case|of)(?![_'[:alnum:]])"
				},
				{
					"name": "expr.keyword.control.edh",
					"match": "(?<![_'[:alnum:]])yield(?![_'[:alnum:]])"
				},
				{
					"name": "expr.keyword.control.edh",
					"match": "(?<![_'[:alnum:]])(for|from|do)(?![_'[:alnum:]])"
				},
				{
					"name": "expr.keyword.control.edh",
					"match": "(?<![_'[:alnum:]])(perform|behave|fallback)(?![_'[:alnum:]])"
				},
				{
					"name": "expr.keyword.control.edh",
					"match": "(?<![_'[:alnum:]])default(?![_'[:alnum:]])"
				},
				{
					"name": "expr.keyword.control.edh",
					"match": "(?<![_'[:alnum:]])as(?![_'[:alnum:]])"
				}
			]
		},
		"identifiers": {
			"patterns": [
				{
					"name": "variable.other.symbolic.edh",
					"match": "\\@[_[:alpha:]][_'[:alnum:]]*"
				},
				{
					"name": "variable.other.alphanumeric.edh",
					"match": "[_[:alpha:]][_'[:alnum:]]*"
				}
			]
		},
		"punctuations": {
			"patterns": [
				{
					"name": "expr.keyword.operator.index.edh",
					"match": "[\\[\\]]+"
				},
				{
					"name": "expr.keyword.operator.alphanumeric.edh",
					"match": "\\~[\\=\\!\\@\\#\\$\\%\\^\\&\\|\\:\\<\\>\\?\\*\\+\\-\\/]*[_'[:alnum:]]+[\\=\\!\\@\\#\\$\\%\\^\\&\\|\\:\\<\\>\\?\\*\\+\\-\\/_'[:alnum:]]*[\\~]?"
				},
				{
					"name": "expr.keyword.operator.edh",
					"match": "[\\~\\=\\!\\@\\#\\$\\%\\^\\&\\|\\:\\<\\>\\?\\*\\+\\-\\/]+"
				},
				{
					"name": "punctuation.separator.field.dot.edh",
					"match": "\\."
				},
				{
					"name": "punctuation.separator.element.edh",
					"match": ","
				},
				{
					"name": "punctuation.separator.statement.edh",
					"match": ";"
				}
			]
		}
	}
}
